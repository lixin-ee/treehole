git init       把当前目录变成git可管理的仓库
git add filename      添加文件到暂存区
git add filename1 filename2      添加多个文件到暂存区
git commit -m "description of commit"      -m 后面输入的是本次提交
git status      查看当前分支及状态
git diff filename       查看修改   
git diff HEAD -- filename       查看工作区和版本库里最新版本的区别
git log 查看历史
git log --pretty=oneline    减少输出信息
git log --graph 查看分支合并图
git reset --hard HEAD^      返回上个版本，HEAD^^ 表示上上个版本，^的数量表示往上多少版本
git reset --hard commit-id        返回到commit-id对应的commit版本
git reflog      记录的你的每一次命令
git checkout -- filename      丢弃工作区修改
git reset HEAD filename      暂存区修改撤销，重新放回工作区
git rm filename    删除文件，通过git commit提交
git remote add origin git@github.com:gitname/repo.git    将本地仓库传到远端
git push -u origin master     把当前分支master推送到远端，-u把本地分支和远端分支关联起来，之后可通过 git push origin master 提交
git remote -v    查看远程库信息
git remote rm origin    删除本地与远程的绑定关系
git clone git@github.com:gitname/repo.git    克隆远程库
//开发时，master分支较为稳定，dev分支为开发分支，其他人各自开发本地dev分支，然后再更新远端dev分支，然后远端dev分支再向master分支合并
git checkout -b dev  创建dev分支并切换到dev分支，等价于git branch dev git checkout dev
git branch    查看当前分支
git checkout master  切换到master分支
git merge dev 合并dev到当前分支
git branch -d dev 删除dev分支
git switch -c dev 创建并切换到dev分支
git switch master  切换到master分支
//要在dev分支上进行开发，必须创建origin的dev分支到本地，使用
git checkout -b dev origin/dev
 git branch --set-upstream-to=origin/dev dev  设置dev和origin/dev的链接
//分支合并出现冲突，先git pull,然后手动解决冲突，再提交，再push
git tag <tagname>   给当前分支最新的commit打标签
git tag    查看当前分支所有标签
git tag <tagname> commit-id    给commit-id的commit打标签
git show <tagname> 查看标签信息
git tag -a <tagname> -m "description of tag "  commit- id 带有说明的标签
git push origin <tagname>  推送一个本地标签
git push origin --tags    推送全部未推送过的本地标签
git tag -d <tagname>   删除一个本地标签
git push origin :refs/tags/<tagname>   删除一个远程标签
git push -f  本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支
git remote show origin 展示远程分支